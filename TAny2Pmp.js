//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

TAny2Pmp_revokePolicyPmp_args = function(args) {
  this.policyName = null;
  if (args) {
    if (args.policyName !== undefined && args.policyName !== null) {
      this.policyName = args.policyName;
    }
  }
};
TAny2Pmp_revokePolicyPmp_args.prototype = {};
TAny2Pmp_revokePolicyPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.policyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_revokePolicyPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_revokePolicyPmp_args');
  if (this.policyName !== null && this.policyName !== undefined) {
    output.writeFieldBegin('policyName', Thrift.Type.STRING, 1);
    output.writeString(this.policyName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_revokePolicyPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TAny2Pmp_revokePolicyPmp_result.prototype = {};
TAny2Pmp_revokePolicyPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_revokePolicyPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_revokePolicyPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_revokeMechanismPmp_args = function(args) {
  this.policyName = null;
  this.mechName = null;
  if (args) {
    if (args.policyName !== undefined && args.policyName !== null) {
      this.policyName = args.policyName;
    }
    if (args.mechName !== undefined && args.mechName !== null) {
      this.mechName = args.mechName;
    }
  }
};
TAny2Pmp_revokeMechanismPmp_args.prototype = {};
TAny2Pmp_revokeMechanismPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.policyName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mechName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_revokeMechanismPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_revokeMechanismPmp_args');
  if (this.policyName !== null && this.policyName !== undefined) {
    output.writeFieldBegin('policyName', Thrift.Type.STRING, 1);
    output.writeString(this.policyName);
    output.writeFieldEnd();
  }
  if (this.mechName !== null && this.mechName !== undefined) {
    output.writeFieldBegin('mechName', Thrift.Type.STRING, 2);
    output.writeString(this.mechName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_revokeMechanismPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TAny2Pmp_revokeMechanismPmp_result.prototype = {};
TAny2Pmp_revokeMechanismPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_revokeMechanismPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_revokeMechanismPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_deployPolicyURIPmp_args = function(args) {
  this.policyFilePath = null;
  if (args) {
    if (args.policyFilePath !== undefined && args.policyFilePath !== null) {
      this.policyFilePath = args.policyFilePath;
    }
  }
};
TAny2Pmp_deployPolicyURIPmp_args.prototype = {};
TAny2Pmp_deployPolicyURIPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.policyFilePath = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_deployPolicyURIPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_deployPolicyURIPmp_args');
  if (this.policyFilePath !== null && this.policyFilePath !== undefined) {
    output.writeFieldBegin('policyFilePath', Thrift.Type.STRING, 1);
    output.writeString(this.policyFilePath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_deployPolicyURIPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TAny2Pmp_deployPolicyURIPmp_result.prototype = {};
TAny2Pmp_deployPolicyURIPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_deployPolicyURIPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_deployPolicyURIPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_deployPolicyXMLPmp_args = function(args) {
  this.XMLPolicy = null;
  if (args) {
    if (args.XMLPolicy !== undefined && args.XMLPolicy !== null) {
      this.XMLPolicy = new TXmlPolicy(args.XMLPolicy);
    }
  }
};
TAny2Pmp_deployPolicyXMLPmp_args.prototype = {};
TAny2Pmp_deployPolicyXMLPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.XMLPolicy = new TXmlPolicy();
        this.XMLPolicy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_deployPolicyXMLPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_deployPolicyXMLPmp_args');
  if (this.XMLPolicy !== null && this.XMLPolicy !== undefined) {
    output.writeFieldBegin('XMLPolicy', Thrift.Type.STRUCT, 1);
    this.XMLPolicy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_deployPolicyXMLPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TAny2Pmp_deployPolicyXMLPmp_result.prototype = {};
TAny2Pmp_deployPolicyXMLPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_deployPolicyXMLPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_deployPolicyXMLPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_listMechanismsPmp_args = function(args) {
};
TAny2Pmp_listMechanismsPmp_args.prototype = {};
TAny2Pmp_listMechanismsPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_listMechanismsPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_listMechanismsPmp_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_listMechanismsPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
  }
};
TAny2Pmp_listMechanismsPmp_result.prototype = {};
TAny2Pmp_listMechanismsPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size462 = 0;
        var _rtmp3466;
        this.success = {};
        var _ktype463 = 0;
        var _vtype464 = 0;
        _rtmp3466 = input.readMapBegin();
        _ktype463 = _rtmp3466.ktype;
        _vtype464 = _rtmp3466.vtype;
        _size462 = _rtmp3466.size;
        for (var _i467 = 0; _i467 < _size462; ++_i467)
        {
          if (_i467 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key468 = null;
          var val469 = null;
          key468 = input.readString().value;
          var _size470 = 0;
          var _rtmp3474;
          val469 = [];
          var _etype473 = 0;
          _rtmp3474 = input.readSetBegin();
          _etype473 = _rtmp3474.etype;
          _size470 = _rtmp3474.size;
          for (var _i475 = 0; _i475 < _size470; ++_i475)
          {
            var elem476 = null;
            elem476 = input.readString().value;
            val469.push(elem476);
          }
          input.readSetEnd();
          this.success[key468] = val469;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_listMechanismsPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_listMechanismsPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.SET, Thrift.objectLength(this.success));
    for (var kiter477 in this.success)
    {
      if (this.success.hasOwnProperty(kiter477))
      {
        var viter478 = this.success[kiter477];
        output.writeString(kiter477);
        output.writeSetBegin(Thrift.Type.STRING, viter478.length);
        for (var iter479 in viter478)
        {
          if (viter478.hasOwnProperty(iter479))
          {
            iter479 = viter478[iter479];
            output.writeString(iter479);
          }
        }
        output.writeSetEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_listPoliciesPmp_args = function(args) {
};
TAny2Pmp_listPoliciesPmp_args.prototype = {};
TAny2Pmp_listPoliciesPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_listPoliciesPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_listPoliciesPmp_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_listPoliciesPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TXmlPolicy]);
    }
  }
};
TAny2Pmp_listPoliciesPmp_result.prototype = {};
TAny2Pmp_listPoliciesPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size480 = 0;
        var _rtmp3484;
        this.success = [];
        var _etype483 = 0;
        _rtmp3484 = input.readSetBegin();
        _etype483 = _rtmp3484.etype;
        _size480 = _rtmp3484.size;
        for (var _i485 = 0; _i485 < _size480; ++_i485)
        {
          var elem486 = null;
          elem486 = new TXmlPolicy();
          elem486.read(input);
          this.success.push(elem486);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_listPoliciesPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_listPoliciesPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter487 in this.success)
    {
      if (this.success.hasOwnProperty(iter487))
      {
        iter487 = this.success[iter487];
        iter487.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_deployPolicyRawXMLPmp_args = function(args) {
  this.xml = null;
  if (args) {
    if (args.xml !== undefined && args.xml !== null) {
      this.xml = args.xml;
    }
  }
};
TAny2Pmp_deployPolicyRawXMLPmp_args.prototype = {};
TAny2Pmp_deployPolicyRawXMLPmp_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.xml = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_deployPolicyRawXMLPmp_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_deployPolicyRawXMLPmp_args');
  if (this.xml !== null && this.xml !== undefined) {
    output.writeFieldBegin('xml', Thrift.Type.STRING, 1);
    output.writeString(this.xml);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_deployPolicyRawXMLPmp_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
TAny2Pmp_deployPolicyRawXMLPmp_result.prototype = {};
TAny2Pmp_deployPolicyRawXMLPmp_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_deployPolicyRawXMLPmp_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_deployPolicyRawXMLPmp_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_getPolicies_args = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = new TData(args.data);
    }
  }
};
TAny2Pmp_getPolicies_args.prototype = {};
TAny2Pmp_getPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.data = new TData();
        this.data.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_getPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_getPolicies_args');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRUCT, 1);
    this.data.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_getPolicies_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [TXmlPolicy]);
    }
  }
};
TAny2Pmp_getPolicies_result.prototype = {};
TAny2Pmp_getPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.SET) {
        var _size488 = 0;
        var _rtmp3492;
        this.success = [];
        var _etype491 = 0;
        _rtmp3492 = input.readSetBegin();
        _etype491 = _rtmp3492.etype;
        _size488 = _rtmp3492.size;
        for (var _i493 = 0; _i493 < _size488; ++_i493)
        {
          var elem494 = null;
          elem494 = new TXmlPolicy();
          elem494.read(input);
          this.success.push(elem494);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_getPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_getPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.SET, 0);
    output.writeSetBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter495 in this.success)
    {
      if (this.success.hasOwnProperty(iter495))
      {
        iter495 = this.success[iter495];
        iter495.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_translatePolicy_args = function(args) {
  this.requestId = null;
  this.parameters = null;
  this.xmlPolicy = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.xmlPolicy !== undefined && args.xmlPolicy !== null) {
      this.xmlPolicy = new TXmlPolicy(args.xmlPolicy);
    }
  }
};
TAny2Pmp_translatePolicy_args.prototype = {};
TAny2Pmp_translatePolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size496 = 0;
        var _rtmp3500;
        this.parameters = {};
        var _ktype497 = 0;
        var _vtype498 = 0;
        _rtmp3500 = input.readMapBegin();
        _ktype497 = _rtmp3500.ktype;
        _vtype498 = _rtmp3500.vtype;
        _size496 = _rtmp3500.size;
        for (var _i501 = 0; _i501 < _size496; ++_i501)
        {
          if (_i501 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key502 = null;
          var val503 = null;
          key502 = input.readString().value;
          val503 = input.readString().value;
          this.parameters[key502] = val503;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.xmlPolicy = new TXmlPolicy();
        this.xmlPolicy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_translatePolicy_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_translatePolicy_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter504 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter504))
      {
        var viter505 = this.parameters[kiter504];
        output.writeString(kiter504);
        output.writeString(viter505);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.xmlPolicy !== null && this.xmlPolicy !== undefined) {
    output.writeFieldBegin('xmlPolicy', Thrift.Type.STRUCT, 3);
    this.xmlPolicy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_translatePolicy_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPtpResponse(args.success);
    }
  }
};
TAny2Pmp_translatePolicy_result.prototype = {};
TAny2Pmp_translatePolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPtpResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_translatePolicy_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_translatePolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_updateDomainModel_args = function(args) {
  this.requestId = null;
  this.parameters = null;
  this.xmlDomainModel = null;
  if (args) {
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
    if (args.parameters !== undefined && args.parameters !== null) {
      this.parameters = Thrift.copyMap(args.parameters, [null]);
    }
    if (args.xmlDomainModel !== undefined && args.xmlDomainModel !== null) {
      this.xmlDomainModel = new TXmlPolicy(args.xmlDomainModel);
    }
  }
};
TAny2Pmp_updateDomainModel_args.prototype = {};
TAny2Pmp_updateDomainModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size506 = 0;
        var _rtmp3510;
        this.parameters = {};
        var _ktype507 = 0;
        var _vtype508 = 0;
        _rtmp3510 = input.readMapBegin();
        _ktype507 = _rtmp3510.ktype;
        _vtype508 = _rtmp3510.vtype;
        _size506 = _rtmp3510.size;
        for (var _i511 = 0; _i511 < _size506; ++_i511)
        {
          if (_i511 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key512 = null;
          var val513 = null;
          key512 = input.readString().value;
          val513 = input.readString().value;
          this.parameters[key512] = val513;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.xmlDomainModel = new TXmlPolicy();
        this.xmlDomainModel.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_updateDomainModel_args.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_updateDomainModel_args');
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 1);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  if (this.parameters !== null && this.parameters !== undefined) {
    output.writeFieldBegin('parameters', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.parameters));
    for (var kiter514 in this.parameters)
    {
      if (this.parameters.hasOwnProperty(kiter514))
      {
        var viter515 = this.parameters[kiter514];
        output.writeString(kiter514);
        output.writeString(viter515);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.xmlDomainModel !== null && this.xmlDomainModel !== undefined) {
    output.writeFieldBegin('xmlDomainModel', Thrift.Type.STRUCT, 3);
    this.xmlDomainModel.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2Pmp_updateDomainModel_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new TPtpResponse(args.success);
    }
  }
};
TAny2Pmp_updateDomainModel_result.prototype = {};
TAny2Pmp_updateDomainModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new TPtpResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TAny2Pmp_updateDomainModel_result.prototype.write = function(output) {
  output.writeStructBegin('TAny2Pmp_updateDomainModel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TAny2PmpClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
TAny2PmpClient.prototype = {};
TAny2PmpClient.prototype.revokePolicyPmp = function(policyName, callback) {
  this.send_revokePolicyPmp(policyName, callback); 
  if (!callback) {
    return this.recv_revokePolicyPmp();
  }
};

TAny2PmpClient.prototype.send_revokePolicyPmp = function(policyName, callback) {
  this.output.writeMessageBegin('revokePolicyPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_revokePolicyPmp_args();
  args.policyName = policyName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_revokePolicyPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_revokePolicyPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_revokePolicyPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'revokePolicyPmp failed: unknown result';
};
TAny2PmpClient.prototype.revokeMechanismPmp = function(policyName, mechName, callback) {
  this.send_revokeMechanismPmp(policyName, mechName, callback); 
  if (!callback) {
    return this.recv_revokeMechanismPmp();
  }
};

TAny2PmpClient.prototype.send_revokeMechanismPmp = function(policyName, mechName, callback) {
  this.output.writeMessageBegin('revokeMechanismPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_revokeMechanismPmp_args();
  args.policyName = policyName;
  args.mechName = mechName;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_revokeMechanismPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_revokeMechanismPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_revokeMechanismPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'revokeMechanismPmp failed: unknown result';
};
TAny2PmpClient.prototype.deployPolicyURIPmp = function(policyFilePath, callback) {
  this.send_deployPolicyURIPmp(policyFilePath, callback); 
  if (!callback) {
    return this.recv_deployPolicyURIPmp();
  }
};

TAny2PmpClient.prototype.send_deployPolicyURIPmp = function(policyFilePath, callback) {
  this.output.writeMessageBegin('deployPolicyURIPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_deployPolicyURIPmp_args();
  args.policyFilePath = policyFilePath;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deployPolicyURIPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_deployPolicyURIPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_deployPolicyURIPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'deployPolicyURIPmp failed: unknown result';
};
TAny2PmpClient.prototype.deployPolicyXMLPmp = function(XMLPolicy, callback) {
  this.send_deployPolicyXMLPmp(XMLPolicy, callback); 
  if (!callback) {
    return this.recv_deployPolicyXMLPmp();
  }
};

TAny2PmpClient.prototype.send_deployPolicyXMLPmp = function(XMLPolicy, callback) {
  this.output.writeMessageBegin('deployPolicyXMLPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_deployPolicyXMLPmp_args();
  args.XMLPolicy = XMLPolicy;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deployPolicyXMLPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_deployPolicyXMLPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_deployPolicyXMLPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'deployPolicyXMLPmp failed: unknown result';
};
TAny2PmpClient.prototype.listMechanismsPmp = function(callback) {
  this.send_listMechanismsPmp(callback); 
  if (!callback) {
    return this.recv_listMechanismsPmp();
  }
};

TAny2PmpClient.prototype.send_listMechanismsPmp = function(callback) {
  this.output.writeMessageBegin('listMechanismsPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_listMechanismsPmp_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listMechanismsPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_listMechanismsPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_listMechanismsPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listMechanismsPmp failed: unknown result';
};
TAny2PmpClient.prototype.listPoliciesPmp = function(callback) {
  this.send_listPoliciesPmp(callback); 
  if (!callback) {
    return this.recv_listPoliciesPmp();
  }
};

TAny2PmpClient.prototype.send_listPoliciesPmp = function(callback) {
  this.output.writeMessageBegin('listPoliciesPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_listPoliciesPmp_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_listPoliciesPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_listPoliciesPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_listPoliciesPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'listPoliciesPmp failed: unknown result';
};
TAny2PmpClient.prototype.deployPolicyRawXMLPmp = function(xml, callback) {
  this.send_deployPolicyRawXMLPmp(xml, callback); 
  if (!callback) {
    return this.recv_deployPolicyRawXMLPmp();
  }
};

TAny2PmpClient.prototype.send_deployPolicyRawXMLPmp = function(xml, callback) {
  this.output.writeMessageBegin('deployPolicyRawXMLPmp', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_deployPolicyRawXMLPmp_args();
  args.xml = xml;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_deployPolicyRawXMLPmp();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_deployPolicyRawXMLPmp = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_deployPolicyRawXMLPmp_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'deployPolicyRawXMLPmp failed: unknown result';
};
TAny2PmpClient.prototype.getPolicies = function(data, callback) {
  this.send_getPolicies(data, callback); 
  if (!callback) {
    return this.recv_getPolicies();
  }
};

TAny2PmpClient.prototype.send_getPolicies = function(data, callback) {
  this.output.writeMessageBegin('getPolicies', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_getPolicies_args();
  args.data = data;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getPolicies();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_getPolicies = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_getPolicies_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getPolicies failed: unknown result';
};
TAny2PmpClient.prototype.translatePolicy = function(requestId, parameters, xmlPolicy, callback) {
  this.send_translatePolicy(requestId, parameters, xmlPolicy, callback); 
  if (!callback) {
    return this.recv_translatePolicy();
  }
};

TAny2PmpClient.prototype.send_translatePolicy = function(requestId, parameters, xmlPolicy, callback) {
  this.output.writeMessageBegin('translatePolicy', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_translatePolicy_args();
  args.requestId = requestId;
  args.parameters = parameters;
  args.xmlPolicy = xmlPolicy;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_translatePolicy();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_translatePolicy = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_translatePolicy_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'translatePolicy failed: unknown result';
};
TAny2PmpClient.prototype.updateDomainModel = function(requestId, parameters, xmlDomainModel, callback) {
  this.send_updateDomainModel(requestId, parameters, xmlDomainModel, callback); 
  if (!callback) {
    return this.recv_updateDomainModel();
  }
};

TAny2PmpClient.prototype.send_updateDomainModel = function(requestId, parameters, xmlDomainModel, callback) {
  this.output.writeMessageBegin('updateDomainModel', Thrift.MessageType.CALL, this.seqid);
  var args = new TAny2Pmp_updateDomainModel_args();
  args.requestId = requestId;
  args.parameters = parameters;
  args.xmlDomainModel = xmlDomainModel;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_updateDomainModel();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

TAny2PmpClient.prototype.recv_updateDomainModel = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new TAny2Pmp_updateDomainModel_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'updateDomainModel failed: unknown result';
};
